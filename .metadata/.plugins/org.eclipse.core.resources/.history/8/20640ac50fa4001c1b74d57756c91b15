package com.prohk.controller;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.prohk.model.ReplyBoardDao;
import com.prohk.model.ReplyBoardDto;
import com.prohk.util.PageWriter;
import com.prohk.util.ScriptWriter;

@Controller
@RequestMapping("/board")
public class BoardController {
	@Autowired
	ReplyBoardDto replyBoardDto;
	@Autowired
	ReplyBoardDto prevBoardDto;
	@Autowired
	ReplyBoardDto nextBoardDto;

	@Autowired
	ReplyBoardDao replyBoardDao;

	@GetMapping("/List.do")
	public String list(HttpServletRequest request, Model model) {
		String tempClickPage = request.getParameter("clickPage");
		String search_select = request.getParameter("search_select");
		String search_word = request.getParameter("search_word");
		String id = request.getParameter("id");

		if (search_select == null || search_select.equals("")) search_select = "";
		if (search_word == null || search_word.equals("")) search_word = "";
		if (id == null || id.equals("")) id = "";
		
		if (tempClickPage == null)
			tempClickPage = "1";
		int clickPage = Integer.parseInt(tempClickPage);
		int totalPage = replyBoardDao.getTotal(search_select, search_word, id);
		int listPerPage = 5;
		int pageBlock = 3;

		int start = (clickPage - 1) * listPerPage + 1;
		int end = clickPage * listPerPage;

		List<ReplyBoardDto> boardList = replyBoardDao.getAllList(start, end, search_select, search_word, id);
		
		String boardPage = "";
		
		if(!search_word.equals("")) {
			boardPage = PageWriter.pageWrite(totalPage, listPerPage, pageBlock, clickPage,
								"../board/List.do?search_select=" + search_select + "&search_word=" + search_word);
		} else if(!id.equals("")) {
			PageWriter.pageWrite(totalPage, listPerPage, pageBlock, clickPage,
					"../board/List.do?id=" + id);
		} else {
			boardPage = PageWriter.pageWrite(totalPage, listPerPage, pageBlock, clickPage, "../board/List.do");
		}

		model.addAttribute("boardList", boardList);
		model.addAttribute("boardPage", boardPage);
		model.addAttribute("totalPage", totalPage);
		model.addAttribute("clickPage", clickPage);
		model.addAttribute("listPerPage", listPerPage);

		return "board/list";
	}

	@GetMapping("/View.do")
	public String view(int no, int num, Model model) {
		int result = replyBoardDao.updateHit(no);
		if (result > 0) {
			replyBoardDto = replyBoardDao.getSelectOne(no);
			prevBoardDto = replyBoardDao.getPrevSelect(num);
			nextBoardDto = replyBoardDao.getNextSelect(num);

			model.addAttribute("replyBoardDto", replyBoardDto);
			model.addAttribute("prevBoardDto", prevBoardDto);
			model.addAttribute("nextBoardDto", nextBoardDto);
		}

		return "board/view";
	}

	@GetMapping("/Write.do")
	public String write() {
		return "board/write";
	}

	@RequestMapping("/WriteProcess.do")
	public void writeProcess(ReplyBoardDto replyBoardDto, HttpSession session, HttpServletResponse response)
			throws Exception {
		replyBoardDto.setReGroup(replyBoardDao.getMaxRegroup() + 1);
		replyBoardDto.setReLevel(1);
		replyBoardDto.setReStep(1);
		replyBoardDto.setId((String) session.getAttribute("loggedId"));

		int result = replyBoardDao.insertBoard(replyBoardDto);
		if (result > 0) {
			ScriptWriter.alertAndNext(response, "글이 등록되었습니다", "../board/List.do");
		} else {
			ScriptWriter.alertAndBack(response, "오류");
		}
	}

	@GetMapping("/Update.do")
	public String update(int no, Model model) {
		replyBoardDto = replyBoardDao.getSelectOne(no);
		model.addAttribute("boardDto", replyBoardDto);
		return "board/update";
	}

	@RequestMapping("/UpdateProcess.do")
	public void updateProcess(ReplyBoardDto replyBoardDto, HttpServletResponse response) throws Exception {
		int result = replyBoardDao.updateBoard(replyBoardDto);
		if (result > 0) {
			ScriptWriter.alertAndNext(response, "글이 수정되었습니다", "../board/List.do");
		} else {
			ScriptWriter.alertAndBack(response, "오류");
		}
	}

	@GetMapping("/Delete.do")
	public String delete() {
		return "board/delete";
	}

	@RequestMapping("/DeleteProcess.do")
	public void deleteProcess(ReplyBoardDto replyBoardDto, HttpServletResponse response) throws Exception {
		int result = replyBoardDao.deleteBoard(replyBoardDto);
		if (result > 0) {
			ScriptWriter.alertAndNext(response, "글이 삭제되었습니다", "../board/List.do");
		} else {
			ScriptWriter.alertAndBack(response, "비밀번호를 확인하세요");
		}
	}

	@GetMapping("/Reply.do")
	public String reply() {
		return "board/reply";
	}

	@RequestMapping("/ReplyProcess.do")
	public void replyWriteProcess(ReplyBoardDto replyBoardDto, HttpServletResponse response) throws Exception {
		int result = replyBoardDao.insertReplyBoard(replyBoardDto);
		if (result > 0) {
			ScriptWriter.alertAndNext(response, "글이 등록되었습니다.", "../board/List.do");
		} else {
			ScriptWriter.alertAndBack(response, "오류");
		}
	}

	@RequestMapping("/SummerNoteFileUpload.do")
	@ResponseBody
	public Map<String, Object> SummerNoteFileUpload(MultipartFile summerNoteImage, HttpServletRequest request,
			HttpServletResponse response) {
		Map<String, Object> hashMap = new HashMap<>();

		// 경로 추가시 ServletAppContext에 파일 경로 추가
		String context = request.getContextPath();
		String imgFolder = "D:\\IT\\spring\\boardImage\\";
		String originalFileName = summerNoteImage.getOriginalFilename();
		String extention = FilenameUtils.getExtension(originalFileName);
		String savedFileName = UUID.randomUUID() + "." + extention;
		File targetFile = new File(imgFolder + savedFileName);
		String dbFileName = context + "/boardImage/" + savedFileName;

		InputStream fileStream;
		try {
			fileStream = summerNoteImage.getInputStream();
			FileUtils.copyInputStreamToFile(fileStream, targetFile);
			hashMap.put("url", dbFileName);
			hashMap.put("responseCode", "success");
		} catch (IOException e) {
			FileUtils.deleteQuietly(targetFile);
			hashMap.put("responseCode", "error");
			e.printStackTrace();
		}

		return hashMap;
	}
}
